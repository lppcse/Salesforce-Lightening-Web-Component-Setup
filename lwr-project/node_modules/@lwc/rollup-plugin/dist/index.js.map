{"version":3,"file":"index.js","sources":["../../shared/dist/index.js","../src/index.ts"],"sourcesContent":["/**\n * Copyright (C) 2023 salesforce.com, inc.\n */\n/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nfunction invariant(value, msg) {\n    if (!value) {\n        throw new Error(`Invariant Violation: ${msg}`);\n    }\n}\nfunction isTrue$1(value, msg) {\n    if (!value) {\n        throw new Error(`Assert Violation: ${msg}`);\n    }\n}\nfunction isFalse$1(value, msg) {\n    if (value) {\n        throw new Error(`Assert Violation: ${msg}`);\n    }\n}\nfunction fail(msg) {\n    throw new Error(msg);\n}\n\nvar assert = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    fail: fail,\n    invariant: invariant,\n    isFalse: isFalse$1,\n    isTrue: isTrue$1\n});\n\n/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nconst { assign, create, defineProperties, defineProperty, freeze, getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, hasOwnProperty, isFrozen, keys, seal, setPrototypeOf, } = Object;\nconst { isArray } = Array;\nconst { concat: ArrayConcat, copyWithin: ArrayCopyWithin, every: ArrayEvery, fill: ArrayFill, filter: ArrayFilter, find: ArrayFind, findIndex: ArrayFindIndex, includes: ArrayIncludes, indexOf: ArrayIndexOf, join: ArrayJoin, map: ArrayMap, pop: ArrayPop, push: ArrayPush, reduce: ArrayReduce, reverse: ArrayReverse, shift: ArrayShift, slice: ArraySlice, some: ArraySome, sort: ArraySort, splice: ArraySplice, unshift: ArrayUnshift, forEach, } = Array.prototype;\n// The type of the return value of Array.prototype.every is `this is T[]`. However, once this\n// Array method is pulled out of the prototype, the function is now referencing `this` where\n// `this` is meaningless, resulting in a TypeScript compilation error.\n//\n// Exposing this helper function is the closest we can get to preserving the usage patterns\n// of Array.prototype methods used elsewhere in the codebase.\nfunction arrayEvery(arr, predicate) {\n    return ArrayEvery.call(arr, predicate);\n}\nconst { fromCharCode: StringFromCharCode } = String;\nconst { charCodeAt: StringCharCodeAt, replace: StringReplace, split: StringSplit, slice: StringSlice, toLowerCase: StringToLowerCase, } = String.prototype;\nfunction isUndefined(obj) {\n    return obj === undefined;\n}\nfunction isNull(obj) {\n    return obj === null;\n}\nfunction isTrue(obj) {\n    return obj === true;\n}\nfunction isFalse(obj) {\n    return obj === false;\n}\nfunction isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nfunction isFunction(obj) {\n    return typeof obj === 'function';\n}\nfunction isObject(obj) {\n    return typeof obj === 'object';\n}\nfunction isString(obj) {\n    return typeof obj === 'string';\n}\nfunction isNumber(obj) {\n    return typeof obj === 'number';\n}\nfunction noop() {\n    /* Do nothing */\n}\nconst OtS = {}.toString;\nfunction toString(obj) {\n    if (obj && obj.toString) {\n        // Arrays might hold objects with \"null\" prototype So using\n        // Array.prototype.toString directly will cause an error Iterate through\n        // all the items and handle individually.\n        if (isArray(obj)) {\n            return ArrayJoin.call(ArrayMap.call(obj, toString), ',');\n        }\n        return obj.toString();\n    }\n    else if (typeof obj === 'object') {\n        return OtS.call(obj);\n    }\n    else {\n        return obj + '';\n    }\n}\nfunction getPropertyDescriptor(o, p) {\n    do {\n        const d = getOwnPropertyDescriptor(o, p);\n        if (!isUndefined(d)) {\n            return d;\n        }\n        o = getPrototypeOf(o);\n    } while (o !== null);\n}\n\n/*\n * Copyright (c) 2023, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n// These must be updated when the enum is updated.\n// It's a bit annoying to do have to do this manually, but this makes the file tree-shakeable,\n// passing the `verify-treeshakeable.js` test.\nconst LOWEST_API_VERSION = 58 /* APIVersion.V58_244_SUMMER_23 */;\nconst HIGHEST_API_VERSION = 59 /* APIVersion.V59_246_WINTER_24 */;\nconst allVersions = [58 /* APIVersion.V58_244_SUMMER_23 */, 59 /* APIVersion.V59_246_WINTER_24 */];\nconst allVersionsSet = /*@__PURE__@*/ new Set(allVersions);\nfunction getAPIVersionFromNumber(version) {\n    if (!isNumber(version)) {\n        // if version is unspecified, default to latest\n        return HIGHEST_API_VERSION;\n    }\n    if (allVersionsSet.has(version)) {\n        return version;\n    }\n    if (version < LOWEST_API_VERSION) {\n        return LOWEST_API_VERSION;\n    }\n    // If it's a number, and it's within the bounds of our known versions, then we should find the\n    // highest version lower than the requested number.\n    // For instance, if we know about versions 1, 2, 5, and 6, and the user requests 3, then we should return 2.\n    for (let i = 1; i < allVersions.length; i++) {\n        if (allVersions[i] > version) {\n            return allVersions[i - 1];\n        }\n    }\n    // version > HIGHEST_API_VERSION, so fall back to highest\n    return HIGHEST_API_VERSION;\n}\nfunction isAPIFeatureEnabled(apiVersionFeature, apiVersion) {\n    switch (apiVersionFeature) {\n        case 0 /* APIFeature.LOWERCASE_SCOPE_TOKENS */:\n        case 1 /* APIFeature.TREAT_ALL_PARSE5_ERRORS_AS_ERRORS */:\n            return apiVersion >= 59 /* APIVersion.V59_246_WINTER_24 */;\n    }\n}\n\n/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n/**\n * According to the following list, there are 48 aria attributes of which two (ariaDropEffect and\n * ariaGrabbed) are deprecated:\n * https://www.w3.org/TR/wai-aria-1.1/#x6-6-definitions-of-states-and-properties-all-aria-attributes\n *\n * The above list of 46 aria attributes is consistent with the following resources:\n * https://github.com/w3c/aria/pull/708/files#diff-eacf331f0ffc35d4b482f1d15a887d3bR11060\n * https://wicg.github.io/aom/spec/aria-reflection.html\n *\n * NOTE: If you update this list, please update test files that implicitly reference this list!\n * Searching the codebase for `aria-flowto` and `ariaFlowTo` should be good enough to find all usages.\n */\nconst AriaPropertyNames = [\n    'ariaActiveDescendant',\n    'ariaAtomic',\n    'ariaAutoComplete',\n    'ariaBusy',\n    'ariaChecked',\n    'ariaColCount',\n    'ariaColIndex',\n    'ariaColSpan',\n    'ariaControls',\n    'ariaCurrent',\n    'ariaDescribedBy',\n    'ariaDetails',\n    'ariaDisabled',\n    'ariaErrorMessage',\n    'ariaExpanded',\n    'ariaFlowTo',\n    'ariaHasPopup',\n    'ariaHidden',\n    'ariaInvalid',\n    'ariaKeyShortcuts',\n    'ariaLabel',\n    'ariaLabelledBy',\n    'ariaLevel',\n    'ariaLive',\n    'ariaModal',\n    'ariaMultiLine',\n    'ariaMultiSelectable',\n    'ariaOrientation',\n    'ariaOwns',\n    'ariaPlaceholder',\n    'ariaPosInSet',\n    'ariaPressed',\n    'ariaReadOnly',\n    'ariaRelevant',\n    'ariaRequired',\n    'ariaRoleDescription',\n    'ariaRowCount',\n    'ariaRowIndex',\n    'ariaRowSpan',\n    'ariaSelected',\n    'ariaSetSize',\n    'ariaSort',\n    'ariaValueMax',\n    'ariaValueMin',\n    'ariaValueNow',\n    'ariaValueText',\n    'role',\n];\nconst { AriaAttrNameToPropNameMap, AriaPropNameToAttrNameMap } = /*@__PURE__*/ (() => {\n    const AriaAttrNameToPropNameMap = create(null);\n    const AriaPropNameToAttrNameMap = create(null);\n    // Synthetic creation of all AOM property descriptors for Custom Elements\n    forEach.call(AriaPropertyNames, (propName) => {\n        const attrName = StringToLowerCase.call(StringReplace.call(propName, /^aria/, () => 'aria-'));\n        AriaAttrNameToPropNameMap[attrName] = propName;\n        AriaPropNameToAttrNameMap[propName] = attrName;\n    });\n    return { AriaAttrNameToPropNameMap, AriaPropNameToAttrNameMap };\n})();\nfunction isAriaAttribute(attrName) {\n    return attrName in AriaAttrNameToPropNameMap;\n}\n// These attributes take either an ID or a list of IDs as values.\n// This includes aria-* attributes as well as the special non-ARIA \"for\" attribute\nconst ID_REFERENCING_ATTRIBUTES_SET = /*@__PURE__*/ new Set([\n    'aria-activedescendant',\n    'aria-controls',\n    'aria-describedby',\n    'aria-details',\n    'aria-errormessage',\n    'aria-flowto',\n    'aria-labelledby',\n    'aria-owns',\n    'for',\n]);\n\n/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n// See browser support for globalThis:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#browser_compatibility\n/* istanbul ignore next */\n// @ts-ignore\nconst _globalThis = typeof globalThis === 'object' ? globalThis : window;\n\n/*\n * Copyright (c) 2023, Salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nconst KEY__SHADOW_RESOLVER = '$shadowResolver$';\nconst KEY__SHADOW_RESOLVER_PRIVATE = '$$ShadowResolverKey$$';\nconst KEY__SHADOW_STATIC = '$shadowStaticNode$';\nconst KEY__SHADOW_STATIC_PRIVATE = '$shadowStaticNodeKey$';\nconst KEY__SHADOW_TOKEN = '$shadowToken$';\nconst KEY__SHADOW_TOKEN_PRIVATE = '$$ShadowTokenKey$$';\nconst KEY__SYNTHETIC_MODE = '$$lwc-synthetic-mode';\nconst KEY__SCOPED_CSS = '$scoped$';\nconst KEY__NATIVE_GET_ELEMENT_BY_ID = '$nativeGetElementById$';\nconst KEY__NATIVE_QUERY_SELECTOR_ALL = '$nativeQuerySelectorAll$';\n\n/*\n * Copyright (c) 2022, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nconst HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\nconst XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';\nconst SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nconst MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\nconst XLINK_NAMESPACE = 'http://www.w3.org/1999/xlink';\n\n/*\n * Copyright (c) 2020, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n// Void elements are elements that self-close even without an explicit solidus (slash),\n// e.g. `</tagName>` or `<tagName />`. For instance, `<meta>` closes on its own; no need for a slash.\n// These only come from HTML; there are no void elements in the SVG or MathML namespaces.\n// See: https://html.spec.whatwg.org/multipage/syntax.html#syntax-tags\nconst VOID_ELEMENTS =  [\n    'area',\n    'base',\n    'br',\n    'col',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'link',\n    'meta',\n    'source',\n    'track',\n    'wbr',\n];\n// These elements have been deprecated but preserving their usage for backwards compatibility\n// until we can officially deprecate them from LWC.\n// See: https://html.spec.whatwg.org/multipage/obsolete.html#obsolete-but-conforming-features\nconst DEPRECATED_VOID_ELEMENTS =  ['param', 'keygen', 'menuitem'];\nconst VOID_ELEMENTS_SET = /*@__PURE__*/ new Set([...VOID_ELEMENTS, ...DEPRECATED_VOID_ELEMENTS]);\nfunction isVoidElement(name, namespace) {\n    return namespace === HTML_NAMESPACE && VOID_ELEMENTS_SET.has(name.toLowerCase());\n}\n\n/*\n * Copyright (c) 2020, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nconst CAMEL_REGEX = /-([a-z])/g;\n/**\n * Maps boolean attribute name to supported tags: 'boolean attr name' => Set of allowed tag names\n * that supports them.\n */\nconst BOOLEAN_ATTRIBUTES = /*@__PURE__@*/ new Map([\n    ['autofocus', /*@__PURE__@*/ new Set(['button', 'input', 'keygen', 'select', 'textarea'])],\n    ['autoplay', /*@__PURE__@*/ new Set(['audio', 'video'])],\n    ['checked', /*@__PURE__@*/ new Set(['command', 'input'])],\n    [\n        'disabled',\n        /*@__PURE__@*/ new Set([\n            'button',\n            'command',\n            'fieldset',\n            'input',\n            'keygen',\n            'optgroup',\n            'select',\n            'textarea',\n        ]),\n    ],\n    ['formnovalidate', /*@__PURE__@*/ new Set(['button'])],\n    ['hidden', /*@__PURE__@*/ new Set()],\n    ['loop', /*@__PURE__@*/ new Set(['audio', 'bgsound', 'marquee', 'video'])],\n    ['multiple', /*@__PURE__@*/ new Set(['input', 'select'])],\n    ['muted', /*@__PURE__@*/ new Set(['audio', 'video'])],\n    ['novalidate', /*@__PURE__@*/ new Set(['form'])],\n    ['open', /*@__PURE__@*/ new Set(['details'])],\n    ['readonly', /*@__PURE__@*/ new Set(['input', 'textarea'])],\n    ['readonly', /*@__PURE__@*/ new Set(['input', 'textarea'])],\n    ['required', /*@__PURE__@*/ new Set(['input', 'select', 'textarea'])],\n    ['reversed', /*@__PURE__@*/ new Set(['ol'])],\n    ['selected', /*@__PURE__@*/ new Set(['option'])],\n]);\nfunction isBooleanAttribute(attrName, tagName) {\n    const allowedTagNames = BOOLEAN_ATTRIBUTES.get(attrName);\n    return (allowedTagNames !== undefined &&\n        (allowedTagNames.size === 0 || allowedTagNames.has(tagName)));\n}\n// This list is based on https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\nconst GLOBAL_ATTRIBUTE = /*@__PURE__*/ new Set([\n    'accesskey',\n    'autocapitalize',\n    'autofocus',\n    'class',\n    'contenteditable',\n    'contextmenu',\n    'dir',\n    'draggable',\n    'enterkeyhint',\n    'exportparts',\n    'hidden',\n    'id',\n    'inputmode',\n    'is',\n    'itemid',\n    'itemprop',\n    'itemref',\n    'itemscope',\n    'itemtype',\n    'lang',\n    'nonce',\n    'part',\n    'slot',\n    'spellcheck',\n    'style',\n    'tabindex',\n    'title',\n    'translate',\n]);\nfunction isGlobalHtmlAttribute(attrName) {\n    return GLOBAL_ATTRIBUTE.has(attrName);\n}\n// These are HTML standard prop/attribute IDL mappings, but are not predictable based on camel/kebab-case conversion\nconst SPECIAL_PROPERTY_ATTRIBUTE_MAPPING = /*@__PURE__@*/ new Map([\n    ['accessKey', 'accesskey'],\n    ['readOnly', 'readonly'],\n    ['tabIndex', 'tabindex'],\n    ['bgColor', 'bgcolor'],\n    ['colSpan', 'colspan'],\n    ['rowSpan', 'rowspan'],\n    ['contentEditable', 'contenteditable'],\n    ['crossOrigin', 'crossorigin'],\n    ['dateTime', 'datetime'],\n    ['formAction', 'formaction'],\n    ['isMap', 'ismap'],\n    ['maxLength', 'maxlength'],\n    ['minLength', 'minlength'],\n    ['noValidate', 'novalidate'],\n    ['useMap', 'usemap'],\n    ['htmlFor', 'for'],\n]);\n/**\n * Map associating previously transformed HTML property into HTML attribute.\n */\nconst CACHED_PROPERTY_ATTRIBUTE_MAPPING = /*@__PURE__@*/ new Map();\nfunction htmlPropertyToAttribute(propName) {\n    const ariaAttributeName = AriaPropNameToAttrNameMap[propName];\n    if (!isUndefined(ariaAttributeName)) {\n        return ariaAttributeName;\n    }\n    const specialAttributeName = SPECIAL_PROPERTY_ATTRIBUTE_MAPPING.get(propName);\n    if (!isUndefined(specialAttributeName)) {\n        return specialAttributeName;\n    }\n    const cachedAttributeName = CACHED_PROPERTY_ATTRIBUTE_MAPPING.get(propName);\n    if (!isUndefined(cachedAttributeName)) {\n        return cachedAttributeName;\n    }\n    let attributeName = '';\n    for (let i = 0, len = propName.length; i < len; i++) {\n        const code = StringCharCodeAt.call(propName, i);\n        if (code >= 65 && // \"A\"\n            code <= 90 // \"Z\"\n        ) {\n            attributeName += '-' + StringFromCharCode(code + 32);\n        }\n        else {\n            attributeName += StringFromCharCode(code);\n        }\n    }\n    CACHED_PROPERTY_ATTRIBUTE_MAPPING.set(propName, attributeName);\n    return attributeName;\n}\n/**\n * Map associating previously transformed kabab-case attributes into camel-case props.\n */\nconst CACHED_KEBAB_CAMEL_MAPPING = /*@__PURE__@*/ new Map();\nfunction kebabCaseToCamelCase(attrName) {\n    let result = CACHED_KEBAB_CAMEL_MAPPING.get(attrName);\n    if (isUndefined(result)) {\n        result = StringReplace.call(attrName, CAMEL_REGEX, (g) => g[1].toUpperCase());\n        CACHED_KEBAB_CAMEL_MAPPING.set(attrName, result);\n    }\n    return result;\n}\n\n/*\n * Copyright (c) 2020, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nconst ESCAPED_CHARS = {\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n};\nfunction htmlEscape(str, attrMode = false) {\n    const searchValue = attrMode ? /[\"&]/g : /[\"'<>&]/g;\n    return str.replace(searchValue, (char) => ESCAPED_CHARS[char]);\n}\n\n/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n// Increment whenever the LWC template compiler changes\nconst LWC_VERSION = \"3.3.2\";\nconst LWC_VERSION_COMMENT = `LWC compiler v${LWC_VERSION}`;\nconst LWC_VERSION_COMMENT_REGEX = /\\/\\*LWC compiler v([\\d.]+)\\*\\/\\s*}/;\n\nexport { AriaAttrNameToPropNameMap, AriaPropNameToAttrNameMap, ArrayConcat, ArrayCopyWithin, ArrayFill, ArrayFilter, ArrayFind, ArrayFindIndex, ArrayIncludes, ArrayIndexOf, ArrayJoin, ArrayMap, ArrayPop, ArrayPush, ArrayReduce, ArrayReverse, ArrayShift, ArraySlice, ArraySome, ArraySort, ArraySplice, ArrayUnshift, HIGHEST_API_VERSION, HTML_NAMESPACE, ID_REFERENCING_ATTRIBUTES_SET, KEY__NATIVE_GET_ELEMENT_BY_ID, KEY__NATIVE_QUERY_SELECTOR_ALL, KEY__SCOPED_CSS, KEY__SHADOW_RESOLVER, KEY__SHADOW_RESOLVER_PRIVATE, KEY__SHADOW_STATIC, KEY__SHADOW_STATIC_PRIVATE, KEY__SHADOW_TOKEN, KEY__SHADOW_TOKEN_PRIVATE, KEY__SYNTHETIC_MODE, LOWEST_API_VERSION, LWC_VERSION, LWC_VERSION_COMMENT, LWC_VERSION_COMMENT_REGEX, MATHML_NAMESPACE, SVG_NAMESPACE, StringCharCodeAt, StringFromCharCode, StringReplace, StringSlice, StringSplit, StringToLowerCase, XLINK_NAMESPACE, XML_NAMESPACE, arrayEvery, assert, assign, create, defineProperties, defineProperty, forEach, freeze, getAPIVersionFromNumber, getOwnPropertyDescriptor, getOwnPropertyNames, getPropertyDescriptor, getPrototypeOf, _globalThis as globalThis, hasOwnProperty, htmlEscape, htmlPropertyToAttribute, isAPIFeatureEnabled, isAriaAttribute, isArray, isBoolean, isBooleanAttribute, isFalse, isFrozen, isFunction, isGlobalHtmlAttribute, isNull, isNumber, isObject, isString, isTrue, isUndefined, isVoidElement, kebabCaseToCamelCase, keys, noop, seal, setPrototypeOf, toString };\n/** version: 3.3.2 */\n//# sourceMappingURL=index.js.map\n","/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\nimport fs from 'fs';\nimport path from 'path';\nimport { URLSearchParams } from 'url';\nimport pluginUtils from '@rollup/pluginutils';\nimport { transformSync } from '@lwc/compiler';\nimport { resolveModule, RegistryType } from '@lwc/module-resolver';\nimport { getAPIVersionFromNumber } from '@lwc/shared';\nconst PLUGIN_NAME = 'rollup-plugin-lwc-compiler';\nconst DEFAULT_MODULES = [\n    { npm: '@lwc/engine-dom' },\n    { npm: '@lwc/synthetic-shadow' },\n    { npm: '@lwc/wire-service' },\n];\nconst IMPLICIT_DEFAULT_HTML_PATH = '@lwc/resources/empty_html.js';\nconst EMPTY_IMPLICIT_HTML_CONTENT = 'export default void 0';\nconst IMPLICIT_DEFAULT_CSS_PATH = '@lwc/resources/empty_css.css';\nconst EMPTY_IMPLICIT_CSS_CONTENT = '';\nfunction isImplicitHTMLImport(importee, importer) {\n    return (path.extname(importer) === '.js' &&\n        path.extname(importee) === '.html' &&\n        path.dirname(importer) === path.dirname(importee) &&\n        path.basename(importer, '.js') === path.basename(importee, '.html'));\n}\nfunction isImplicitCssImport(importee, importer) {\n    return (path.extname(importee) === '.css' &&\n        path.extname(importer) === '.html' &&\n        (path.basename(importee, '.css') === path.basename(importer, '.html') ||\n            path.basename(importee, '.scoped.css') === path.basename(importer, '.html')));\n}\nfunction parseDescriptorFromFilePath(id) {\n    const [filename, query] = id.split('?', 2);\n    const params = new URLSearchParams(query);\n    const scoped = params.has('scoped');\n    const specifier = params.get('specifier');\n    return {\n        filename,\n        specifier,\n        scoped,\n    };\n}\nfunction appendAliasSpecifierQueryParam(id, specifier) {\n    const [filename, query] = id.split('?', 2);\n    const params = new URLSearchParams(query);\n    params.set('specifier', specifier);\n    return `${filename}?${params.toString()}`;\n}\nfunction transformWarningToRollupWarning(warning, src, id) {\n    var _a;\n    // For reference on RollupWarnings, a good example is:\n    // https://github.com/rollup/plugins/blob/53776ee/packages/typescript/src/diagnostics/toWarning.ts\n    const pluginCode = `LWC${warning.code}`; // modeled after TypeScript, e.g. TS5055\n    const result = {\n        // Replace any newlines in case they exist, just so the Rollup output looks a bit cleaner\n        message: `@lwc/rollup-plugin: ${(_a = warning.message) === null || _a === void 0 ? void 0 : _a.replace(/\\n/g, ' ')}`,\n        plugin: PLUGIN_NAME,\n        pluginCode,\n    };\n    const { location } = warning;\n    if (location) {\n        result.loc = {\n            // The CompilerDiagnostic from @lwc/template-compiler reports an undefined filename, because it loses the\n            // filename context here:\n            // https://github.com/salesforce/lwc/blob/e2bc36f/packages/%40lwc/compiler/src/transformers/template.ts#L35-L38\n            file: id,\n            // For LWC, the column is 0-based and the line is 1-based. Rollup just reports this for informational\n            // purposes, though; it doesn't seem to matter what we put here.\n            column: location.column,\n            line: location.line,\n        };\n        // To get a fancier output like @rollup/plugin-typescript's, we would need to basically do our\n        // own color coding on the entire line, adding the wavy lines to indicate an error, etc. You can see how\n        // TypeScript does it here: https://github.com/microsoft/TypeScript/blob/1a4643b/src/compiler/program.ts#L453-L485\n        // Outputting just the string that caused the error is good enough for now though.\n        if (typeof location.start === 'number' && typeof location.length === 'number') {\n            result.frame = src.substring(location.start, location.start + location.length);\n        }\n    }\n    return result;\n}\nexport default function lwc(pluginOptions = {}) {\n    const filter = pluginUtils.createFilter(pluginOptions.include, pluginOptions.exclude);\n    let { rootDir, modules = [] } = pluginOptions;\n    const { stylesheetConfig, sourcemap = false, preserveHtmlComments, experimentalDynamicComponent, experimentalDynamicDirective, enableDynamicComponents, enableLightningWebSecurityTransforms, \n    // TODO [#3370]: remove experimental template expression flag\n    experimentalComplexExpressions, disableSyntheticShadowSupport, apiVersion, } = pluginOptions;\n    return {\n        name: PLUGIN_NAME,\n        buildStart({ input }) {\n            if (rootDir === undefined) {\n                if (Array.isArray(input)) {\n                    rootDir = path.dirname(path.resolve(input[0]));\n                    if (input.length > 1) {\n                        this.warn(`The \"rootDir\" option should be explicitly set when passing an \"input\" array to rollup. The \"rootDir\" option is implicitly resolved to ${rootDir}.`);\n                    }\n                }\n                else {\n                    rootDir = path.dirname(path.resolve(Object.values(input)[0]));\n                    this.warn(`The \"rootDir\" option should be explicitly set when passing \"input\" object to rollup. The \"rootDir\" option is implicitly resolved to ${rootDir}.`);\n                }\n            }\n            else {\n                rootDir = path.resolve(rootDir);\n            }\n            modules = [...modules, ...DEFAULT_MODULES, { dir: rootDir }];\n        },\n        resolveId(importee, importer) {\n            if (importer) {\n                // Importer has been resolved already and may contain an alias specifier\n                const { filename: importerFilename } = parseDescriptorFromFilePath(importer);\n                // Normalize relative import to absolute import\n                // Note that in @rollup/plugin-node-resolve v13, relative imports will sometimes\n                // be in absolute format (e.g. \"/path/to/module.js\") so we have to check that as well.\n                if (importee.startsWith('.') || importee.startsWith('/')) {\n                    const importerExt = path.extname(importerFilename);\n                    // if importee has query params importeeExt will store them.\n                    // ex: if scoped.css?scoped=true, importeeExt = .css?scoped=true\n                    const importeeExt = path.extname(importee) || importerExt;\n                    const importeeResolvedPath = path.resolve(path.dirname(importerFilename), importee);\n                    // importeeAbsPath will contain query params because they are attached to importeeExt.\n                    // ex: myfile.scoped.css?scoped=true\n                    const importeeAbsPath = pluginUtils.addExtension(importeeResolvedPath, importeeExt);\n                    // remove query params\n                    const { filename: importeeNormalizedFilename } = parseDescriptorFromFilePath(importeeAbsPath);\n                    if (isImplicitHTMLImport(importeeNormalizedFilename, importerFilename) &&\n                        !fs.existsSync(importeeNormalizedFilename)) {\n                        return IMPLICIT_DEFAULT_HTML_PATH;\n                    }\n                    if (isImplicitCssImport(importeeNormalizedFilename, importerFilename) &&\n                        !fs.existsSync(importeeNormalizedFilename)) {\n                        return IMPLICIT_DEFAULT_CSS_PATH;\n                    }\n                    return importeeAbsPath;\n                }\n                else {\n                    // Could be an import like `import component from 'x/component'`\n                    try {\n                        const { entry, specifier, type } = resolveModule(importee, importer, {\n                            modules,\n                            rootDir,\n                        });\n                        if (type === RegistryType.alias) {\n                            // specifier must be in in namespace/name format\n                            const [namespace, name, ...rest] = specifier.split('/');\n                            // Alias specifier must have been in the namespace / name format\n                            // to be used as the tag name of a custom element.\n                            // Verify 3 things about the alias specifier:\n                            // 1. The namespace is a non-empty string\n                            // 2. The name is an non-empty string\n                            // 3. The specifier was in a namespace / name format, ie no extra '/' (this is what rest checks)\n                            const hasValidSpecifier = !!(namespace === null || namespace === void 0 ? void 0 : namespace.length) && !!(name === null || name === void 0 ? void 0 : name.length) && !(rest === null || rest === void 0 ? void 0 : rest.length);\n                            if (hasValidSpecifier) {\n                                return appendAliasSpecifierQueryParam(entry, specifier);\n                            }\n                        }\n                        return entry;\n                    }\n                    catch (err) {\n                        if (err && err.code !== 'NO_LWC_MODULE_FOUND') {\n                            throw err;\n                        }\n                    }\n                }\n            }\n        },\n        load(id) {\n            if (id === IMPLICIT_DEFAULT_HTML_PATH) {\n                return EMPTY_IMPLICIT_HTML_CONTENT;\n            }\n            if (id === IMPLICIT_DEFAULT_CSS_PATH) {\n                return EMPTY_IMPLICIT_CSS_CONTENT;\n            }\n            // Have to parse the `?scoped=true` in `load`, because it's not guaranteed\n            // that `resolveId` will always be called (e.g. if another plugin resolves it first)\n            const { filename, specifier: hasAlias } = parseDescriptorFromFilePath(id);\n            const isCSS = path.extname(filename) === '.css';\n            if (isCSS || hasAlias) {\n                const exists = fs.existsSync(filename);\n                if (exists) {\n                    return fs.readFileSync(filename, 'utf8');\n                }\n                else if (isCSS) {\n                    this.warn(`The imported CSS file ${filename} does not exist: Importing it as undefined. ` +\n                        `This behavior may be removed in a future version of LWC. Please avoid importing a ` +\n                        `CSS file that does not exist.`);\n                    return EMPTY_IMPLICIT_CSS_CONTENT;\n                }\n            }\n        },\n        transform(src, id) {\n            var _a;\n            const { scoped, filename, specifier } = parseDescriptorFromFilePath(id);\n            // Filter user-land config and lwc import\n            if (!filter(filename)) {\n                return;\n            }\n            // Extract module name and namespace from file path.\n            // Specifier will only exist for modules with alias paths.\n            // Otherwise, use the file directory structure to resolve namespace and name.\n            const [namespace, name] = (_a = specifier === null || specifier === void 0 ? void 0 : specifier.split('/')) !== null && _a !== void 0 ? _a : path.dirname(filename).split(path.sep).slice(-2);\n            const apiVersionToUse = getAPIVersionFromNumber(apiVersion);\n            const { code, map, warnings } = transformSync(src, filename, {\n                name,\n                namespace,\n                outputConfig: { sourcemap },\n                stylesheetConfig,\n                experimentalDynamicComponent,\n                experimentalDynamicDirective,\n                enableDynamicComponents,\n                enableLightningWebSecurityTransforms,\n                // TODO [#3370]: remove experimental template expression flag\n                experimentalComplexExpressions,\n                preserveHtmlComments,\n                scopedStyles: scoped,\n                disableSyntheticShadowSupport,\n                apiVersion: apiVersionToUse,\n            });\n            if (warnings) {\n                for (const warning of warnings) {\n                    this.warn(transformWarningToRollupWarning(warning, src, filename));\n                }\n            }\n            const rollupMap = map;\n            return { code, map: rollupMap };\n        },\n    };\n}\n// For backward compatibility with commonjs format\nmodule.exports = lwc;\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}